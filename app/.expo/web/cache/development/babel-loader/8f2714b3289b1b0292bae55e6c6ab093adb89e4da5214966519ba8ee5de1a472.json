{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function TelaDeCriacaoDeAmbiente(_ref) {\n  var route = _ref.route;\n  var adicionarAmbiente = route.params.adicionarAmbiente;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    nome = _useState2[0],\n    setNome = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    imagem = _useState4[0],\n    setImagem = _useState4[1];\n  var navigation = useNavigation();\n  var handleConfirmar = function handleConfirmar() {\n    if (nome && imagem) {\n      var novoAmbiente = {\n        nome: nome,\n        imagem: imagem\n      };\n      adicionarAmbiente(novoAmbiente);\n      navigation.goBack();\n    } else {}\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Nome do Ambiente:\"\n    }), _jsx(TextInput, {\n      value: nome,\n      onChangeText: function onChangeText(text) {\n        return setNome(text);\n      }\n    }), _jsx(Text, {\n      children: \"Imagem do Ambiente:\"\n    }), _jsx(Button, {\n      title: \"Confirmar\",\n      onPress: handleConfirmar\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: 'white'\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","useNavigation","jsx","_jsx","jsxs","_jsxs","TelaDeCriacaoDeAmbiente","_ref","route","adicionarAmbiente","params","_useState","_useState2","_slicedToArray","nome","setNome","_useState3","_useState4","imagem","setImagem","navigation","handleConfirmar","novoAmbiente","goBack","style","styles","container","children","value","onChangeText","text","title","onPress","create","flex","padding","backgroundColor"],"sources":["C:/Users/gabriel_ao_silva/SA_2023_3B_SesiSenai_Ambientes/app/src/screens/TelaDeCriacaoDeAmbiente/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, Button, Image, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nexport function TelaDeCriacaoDeAmbiente({ route }) {\r\n    const { adicionarAmbiente } = route.params;\r\n    const [nome, setNome] = useState('');\r\n    const [imagem, setImagem] = useState(null);\r\n    const navigation = useNavigation();\r\n\r\n    const handleConfirmar = () => {\r\n        if (nome && imagem) {\r\n            // Crie um novo ambiente com nome e imagem\r\n            const novoAmbiente = { nome, imagem };\r\n\r\n            // Chame a função para adicionar o ambiente à lista\r\n            adicionarAmbiente(novoAmbiente);\r\n\r\n            // Volte para a tela de Ambientes\r\n            navigation.goBack();\r\n        } else {\r\n            // Lógica para lidar com campos em branco ou imagem ausente\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text>Nome do Ambiente:</Text>\r\n            <TextInput\r\n                value={nome}\r\n                onChangeText={text => setNome(text)}\r\n            />\r\n            <Text>Imagem do Ambiente:</Text>\r\n            {/* Componente de seleção de imagem (implementação depende da biblioteca que você está usando) */}\r\n            {/* Lógica para selecionar uma imagem e atualizar o estado \"imagem\" */}\r\n\r\n            <Button title=\"Confirmar\" onPress={handleConfirmar} />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        padding: 20,\r\n        backgroundColor: 'white',\r\n    },\r\n    // Defina outros estilos aqui conforme necessário\r\n});\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAExC,SAASC,aAAa,QAAQ,0BAA0B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEzD,OAAO,SAASC,uBAAuBA,CAAAC,IAAA,EAAY;EAAA,IAATC,KAAK,GAAAD,IAAA,CAALC,KAAK;EAC3C,IAAQC,iBAAiB,GAAKD,KAAK,CAACE,MAAM,CAAlCD,iBAAiB;EACzB,IAAAE,SAAA,GAAwBhB,QAAQ,CAAC,EAAE,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7BG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EACpB,IAAAI,UAAA,GAA4BrB,QAAQ,CAAC,IAAI,CAAC;IAAAsB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAnCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EACxB,IAAMG,UAAU,GAAGnB,aAAa,CAAC,CAAC;EAElC,IAAMoB,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;IAC1B,IAAIP,IAAI,IAAII,MAAM,EAAE;MAEhB,IAAMI,YAAY,GAAG;QAAER,IAAI,EAAJA,IAAI;QAAEI,MAAM,EAANA;MAAO,CAAC;MAGrCT,iBAAiB,CAACa,YAAY,CAAC;MAG/BF,UAAU,CAACG,MAAM,CAAC,CAAC;IACvB,CAAC,MAAM,CAEP;EACJ,CAAC;EAED,OACIlB,KAAA,CAACT,IAAI;IAAC4B,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC1BxB,IAAA,CAACN,IAAI;MAAA8B,QAAA,EAAC;IAAiB,CAAM,CAAC,EAC9BxB,IAAA,CAACL,SAAS;MACN8B,KAAK,EAAEd,IAAK;MACZe,YAAY,EAAE,SAAAA,aAAAC,IAAI;QAAA,OAAIf,OAAO,CAACe,IAAI,CAAC;MAAA;IAAC,CACvC,CAAC,EACF3B,IAAA,CAACN,IAAI;MAAA8B,QAAA,EAAC;IAAmB,CAAM,CAAC,EAIhCxB,IAAA,CAACJ,MAAM;MAACgC,KAAK,EAAC,WAAW;MAACC,OAAO,EAAEX;IAAgB,CAAE,CAAC;EAAA,CACpD,CAAC;AAEf;AAEA,IAAMI,MAAM,GAAGzB,UAAU,CAACiC,MAAM,CAAC;EAC7BP,SAAS,EAAE;IACPQ,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,EAAE;IACXC,eAAe,EAAE;EACrB;AAEJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}